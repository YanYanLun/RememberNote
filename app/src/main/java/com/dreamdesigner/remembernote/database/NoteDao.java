package com.dreamdesigner.remembernote.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import android.text.TextUtils;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "Note".
 */
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, Long.class, "content", false, "CONTENT");
        public final static Property Images = new Property(3, Long.class, "images", false, "IMAGES");
        public final static Property Url = new Property(4, Long.class, "url", false, "URL");
        public final static Property Year = new Property(5, Long.class, "year", false, "YEAR");
        public final static Property Month = new Property(6, Long.class, "month", false, "MONTH");
        public final static Property Day = new Property(7, Long.class, "day", false, "DAY");
        public final static Property Time = new Property(8, Long.class, "time", false, "TIME");
    }

    private DaoSession daoSession;


    public NoteDao(DaoConfig config) {
        super(config);
    }

    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * private int id;
     private String title;
     private String content;
     private String images;
     private String url;
     private int year;
     private int month;
     private int day;
     private String time;
     * */

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + NoteDao.TABLENAME + " (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT," + // 0: id
                "\"TITLE\" TEXT," + // 1: name
                "\"CONTENT\" TEXT," + // 2: sex
                "\"IMAGES\" TEXT," + // 3: images
                "\"URL\" TEXT," + // 4: url
                "\"YEAR\" INTEGER," + // 5: year
                "\"MONTH\" INTEGER," + // 6: month
                "\"DAY\" INTEGER," + // 7: day
                "\"TIME\" TEXT);"); // 8: time
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_NOTE_TEXT_DATE_DESC ON NOTE" +
                " (\"ID\" ASC,\"ID\" DESC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + NoteDao.TABLENAME;
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (!TextUtils.isEmpty(title)) {
            stmt.bindString(2, title);
        }

        String content = entity.getContent();
        if (!TextUtils.isEmpty(content)) {
            stmt.bindString(3, content);
        }

        String images = entity.getImages();
        if (!TextUtils.isEmpty(images)) {
            stmt.bindString(4, images);
        }

        String url = entity.getUrl();
        if (!TextUtils.isEmpty(url)) {
            stmt.bindString(5, url);
        }

        int year = entity.getYear();
        if (year != 0) {
            stmt.bindLong(6, year);
        }

        int month = entity.getMonth();
        if (month != 0) {
            stmt.bindLong(7, month);
        }

        int day = entity.getDay();
        if (day != 0) {
            stmt.bindLong(8, day);
        }

        String time = entity.getTime();
        if (!TextUtils.isEmpty(time)) {
            stmt.bindString(9, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (!TextUtils.isEmpty(title)) {
            stmt.bindString(2, title);
        }

        String content = entity.getContent();
        if (!TextUtils.isEmpty(content)) {
            stmt.bindString(3, content);
        }

        String images = entity.getImages();
        if (!TextUtils.isEmpty(images)) {
            stmt.bindString(4, images);
        }

        String url = entity.getUrl();
        if (!TextUtils.isEmpty(url)) {
            stmt.bindString(5, url);
        }

        int year = entity.getYear();
        if (year != 0) {
            stmt.bindLong(6, year);
        }

        int month = entity.getMonth();
        if (month != 0) {
            stmt.bindLong(7, month);
        }

        int day = entity.getDay();
        if (day != 0) {
            stmt.bindLong(8, day);
        }

        String time = entity.getTime();
        if (!TextUtils.isEmpty(time)) {
            stmt.bindString(9, time);
        }
    }

    @Override
    protected final void attachEntity(Note entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    //String title, String content, String images, String url, int year, int month, int day, String time
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0),
                cursor.isNull(offset + 1) ? "" : cursor.getString(offset + 1), // title
                cursor.isNull(offset + 2) ? "" : cursor.getString(offset + 2), // content
                cursor.isNull(offset + 3) ? "" : cursor.getString(offset + 3), // images
                cursor.isNull(offset + 4) ? "" : cursor.getString(offset + 4), // url
                cursor.getInt(offset + 5), // year
                cursor.getInt(offset + 6), // month
                cursor.getInt(offset + 7), // day
                cursor.isNull(offset + 8) ? "" : cursor.getString(offset + 8) // time
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? "" : cursor.getString(offset + 1)); // title
        entity.setContent(cursor.isNull(offset + 2) ? "" : cursor.getString(offset + 2)); // content
        entity.setImages(cursor.isNull(offset + 3) ? "" : cursor.getString(offset + 3)); // images
        entity.setUrl(cursor.isNull(offset + 4) ? "" : cursor.getString(offset + 4)); // url
        entity.setYear(cursor.getInt(offset + 5));  // year
        entity.setMonth(cursor.getInt(offset + 6));   // month
        entity.setDay(cursor.getInt(offset + 7));  // day
        entity.setTime(cursor.isNull(offset + 8) ? "" : cursor.getString(offset + 8)); // time
    }

    @Override
    protected final Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Note entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    @Override
    public List<Note> loadAll() {
        Cursor cursor = db.rawQuery("SELECT * FROM " + NoteDao.TABLENAME + " ORDER BY TIME DESC", null);
        return loadAllAndCloseCursor(cursor);
    }
}
